                   /  Optimal Instruction Set Horizontal Microcode  o.has
                   
                   / The label indicates the opcode decoded up to that 
                   / point. Each hex digit in a label represents 4 
                   / bits.  0 or 1 in a label represents the bits 0 and 
                   / 1.  For example, the label LF_01 corresponds to 
                   / opcode bits 1111 01; the label LF_2 corresponds to 
                   / opcode bits 1111 0010. 
                   
                   /***********************************************************
                   /     Fetch instruction and increment pc register and       
                   /     decode first bit of opcode                            
                   /***********************************************************
fetch:      mar = pc; pc = pc + 1;
            rd;                   
            ir = mdr; if (s) goto L1;
                   /***********************************************************
                   /           Decode opcode                                   
                   /***********************************************************
L0:         dc = left(ir); if (s) goto L01; 
L00:        dc = left(dc); if (s) goto L001; 
L000:       dc = left(dc); if (s) goto L0001; 
            goto L0000;
L1:         dc = left(ir); if (s) goto L11; 
L10:        dc = left(dc); if (s) goto L101; 
L100:       dc = left(dc); if (s) goto L9; 
            goto L8;
L01:        dc = left(dc); if (s) goto L011; 
L010:       dc = left(dc); if (s) goto L5; 
            goto L4;          
L11:        dc = left(dc); if (s) goto L111; 
L110:       dc = left(dc); if (s) goto LD; 
            goto LC;
L001:       dc = left(dc); if (s) goto L3; 
            goto L2;
L011:       dc = left(dc); if (s) goto L7; 
            goto L6;
L101:       dc = left(dc); if (s) goto LB; 
            goto LA;
L111:       dc = left(dc); if (s) goto LF; 
            goto LE;
LF:         dc = left(dc); if (s) goto LF_1; 
LF_0:       dc = left(dc); if (s) goto LF_01; 
LF_00:      dc = left(dc); if (s) goto LF_001; 
LF_000:     dc = left(dc); if (s) goto LF_0001;
            goto LF_0000;
LF_1:       dc = left(dc); if (s) goto LF_11; 
LF_10:      dc = left(dc); if (s) goto LF_101; 
LF_100:     dc = left(dc); if (s) goto LF_9;
            goto LF_8;
LF_01:      dc = left(dc); if (s) goto LF_011; 
LF_010:     dc = left(dc); if (s) goto LF_5;
            goto LF_4;
LF_11:      dc = left(dc); if (s) goto LF_111; 
LF_110:     dc = left(dc); if (s) goto LF_D;
            goto LF_C;
LF_001:     dc = left(dc); if (s) goto LF_3;
            goto LF_2;
LF_011:     dc = left(dc); if (s) goto LF_7;
            goto LF_6;
LF_101:     dc = left(dc); if (s) goto LF_B;
            goto LF_A;
LF_111:     dc = left(dc); if (s) goto LF_F;
            goto LF_E;
LF_F:       dc = left(dc); if (s) goto LF_F_1;
LF_F_0:     dc = left(dc); if (s) goto LF_F_01;
LF_F_00:    dc = left(dc); if (s) goto LF_F_001;
LF_F_000:   dc = left(dc); if (s) goto LF_F_0001;
            goto LF_F_0000;
LF_F_1:     dc = left(dc); if (s) goto LF_F_11
LF_F_10:    dc = left(dc); if (s) goto LF_F_101;
LF_F_100:   dc = left(dc); if (s) goto LF_F_9;
            goto LF_F_8;
LF_F_01:    dc = left(dc); if (s) goto LF_F_011;
LF_F_010:   dc = left(dc); if (s) goto LF_F_5;
            goto LF_F_4;
LF_F_11:    dc = left(dc); if (s) goto LF_F_111
LF_F_110:   dc = left(dc); if (s) goto LF_F_D;
            goto LF_F_C;
LF_F_001:   dc = left(dc); if (s) goto LF_F_3;
            goto LF_F_2;
LF_F_011:   dc = left(dc); if (s) goto LF_F_7;
            goto LF_F_6;
LF_F_101:   dc = left(dc); if (s) goto LF_F_B;
            goto LF_F_A;
LF_F_111:   dc = left(dc); if (s) goto LF_F_F;
            goto LF_F_E;
LF_F_F:     dc = left(dc); if (s) goto fetch
LF_F_F_0:   dc = left(dc); if (s) goto LF_F_F_01
LF_F_F_00:  dc = left(dc); if (s) goto LF_F_F_001
LF_F_F_000: dc = left(dc); if (s) goto LF_F_F_0001;
            goto LF_F_F_0000;
LF_F_F_001: dc = left(dc); if (s) goto LF_F_F_3
            goto LF_F_F_2; 
LF_F_F_01:  dc = left(dc); if (s) goto fetch;
LF_F_F_010: dc = left(dc); if (s) goto fetch;
            goto LF_F_F_4;
/***********************************************************
/           Microcode for each instruction                  
/***********************************************************
L0000:      /------------------------- LD --------------
            mar = ir;
            rd; 
            ac = mdr; goto fetch; 
L0001:      /------------------------- ST --------------
            mar = ir; mdr = ac;
            wr; goto fetch; 
L2:         /------------------------- ADD -------------
            mar = ir;
addcd:      rd; cy = 0;
astart:     0  = ac; if (s) goto aneg;
            ac = ac + cy;
            goto doadd;
aneg:       ac = ac + cy; if (s) goto doadd;
            cy = 1; goto atest;
doadd:      cy = 0;
atest:      0  = mdr; if (s) goto sign1;
sign0:      0  = ac; if(s) goto sign01;
sign00:     goto adone;
sign1:      0  = ac; if (s) goto sign11;
sign01:
sign10:     ac = mdr + ac; if(s) goto fetch;
            cy = 1; goto fetch;
sign11:     cy = 1;
adone:      ac = mdr + ac; goto fetch; 
L3:         /------------------------- SUB -------------
            mar = ir;
            rd; 
            ac = ac - mdr; goto fetch;
L4:         /------------------------- LDR -------------
            f = ir + bp;
            mar = f; 
            rd; 
            ac = mdr; goto fetch;
L5:         /------------------------- STR -------------
            f = ir + bp;
            mar = f; mdr = ac; 
            wr; goto fetch:
L6:         /------------------------- ADDR ------------
            f = ir + bp;
            mar = f; goto addcd;
//          rd;
//          ac = mdr + ac; goto fetch;
L7:         /------------------------- SUBR ------------
            f = ir + bp;
            mar = f;
            rd;
            f = mdr;
            ac = ac - f; goto fetch;
L8:         /------------------------- LDC -------------
            ac = ir & xmask; goto fetch;
L9:         /------------------------- JA --------------
            pc = ir & xmask; goto fetch;
LA:         /------------------------- JZOP ------------
            0  = ac; if (s) goto fetch;
            pc = ir & xmask; goto fetch; 
LB:         /------------------------- JN --------------
            0  = ac; if (s) goto dojn;
            goto fetch; 
dojn:       pc = ir & xmask; goto fetch; 
LC:         /------------------------- JZ --------------
            0  = ac; if (z) goto dojz;
            goto fetch; 
dojz:       pc = ir & xmask; goto fetch; 
LD:         /------------------------- JNZ -------------
            0  = ac; if (z) goto fetch;
            pc = ir & xmask; goto fetch; 
LE:         /------------------------- CALL ------------
            sp = sp - 1;
            mar = sp; mdr = pc;  
            pc = ir & xmask; wr; goto fetch; 
LF_0000:    /------------------------- RET -------------
            mar = sp; sp = sp + 1;
            rd;                                         
            pc = mdr; goto fetch;                       
LF_0001:    /------------------------- LDI -------------
            mar = ac;
            rd;
            ac = mdr; goto fetch;
LF_2:       /------------------------- STI -------------
            mar = sp; sp = sp + 1;
            rd;                                          
            mar = ac;                                    
            wr; goto fetch;                              
LF_3:       /------------------------- PUSH ------------
            sp = sp - 1;
            mar = sp; mdr = ac;                         
            wr; goto fetch;                             
LF_4:       /------------------------- POP -------------
            mar = sp; sp = sp + 1;
            rd;                                         
            ac = mdr; goto fetch;                       
LF_5:       /------------------------- ALOC ------------
            f = ir & ymask;
            sp = sp - f; goto fetch;
LF_6:       /------------------------- DLOC ------------
            f = ir & ymask;
            sp = sp + f; goto fetch;                    
LF_7:       /------------------------- SWAP ------------
            f = ac;
            ac = sp;                                    
            sp = f; goto fetch;                         
LF_8:       /------------------------- ADDC ------------
            mdr = ir & ymask;
            cy = 0; goto astart;
LF_9:       /------------------------- SUBC ------------
            f = ir & ymask;
            ac = ac - f; goto fetch;
LF_A:       /------------------------- ESBA ------------
            sp = sp - 1;
            mar = sp; mdr = bp;
            wr; bp = sp & xmask; goto fetch
LF_B:       /------------------------- REBA ------------
            sp = bp + 1; mar = bp;
            rd; 
            bp = mdr; goto fetch
LF_C:       /------------------------- CORA ------------
            ac = ac + bp;
            ac = ac & xmask; goto fetch;
/           e = bp & xmask;
/           ac = ac + e; goto fetch;
LF_D:       /------------------------- SCMP ------------
            mar = sp; sp = sp + 1;
            rd;
            f =  mdr - ac; if (z) goto load0;
            0  = ac; if (s) goto acneg;
acpos:      0  = mdr; if (s) goto loadm1;
ssign:      0  = f; if (s) goto loadm1;
            goto load1;
acneg:      0  = mdr; if (s) goto ssign;
            goto load1;
loadm1:     ac = ~0; goto fetch;
load0:      ac = 0; goto fetch;
load1:      ac = 1; goto fetch;

LF_E:       /------------------------- UCMP ------------
            mar = sp; sp = sp + 1;
            rd;
            f = mdr - ac; if (z) goto load0;
            0  = ac; if (s) goto uacneg;
uacpos:     0   = mdr; if (s) goto load1;
ussign:     0  = f; if(s) goto loadm1;
            goto load1;
uacneg:     0  = mdr; if (s) goto ussign;
            goto loadm1;
LF_F_0000:  /------------------------- SHLL ------------
            f = ir & zmask; if (z) goto fetch;
left:       ac = left(ac);
            f = f - 1; if (z) goto fetch
            goto left;
LF_F_0001:  /------------------------- SHRL ------------
            f = ir & zmask; if (z) goto fetch;
right:      ac = right(ac);
            f = f - 1; if (z) goto fetch
            goto right;
LF_F_2:     /------------------------- SHRA ------------
            f = ir & zmask; if (z) goto fetch;
            0  = ac; if (s) goto sneg;
            e = 0; goto aright;
sneg:       e = ~1;
            e = right(e);
            e = ~e;
aright:     ac = right(ac);
            ac = ac + e;
            f = f - 1; if (z) goto fetch
            goto aright;
LF_F_3:     /------------------------- M ---------------
            e = ac;
            mar = sp; sp = sp + 1; 
            rd; 
            f = mdr;
            ac = 0;
multloop:   0  = f; if (z) goto fetch
            0  = f & 1; if (z) goto noadd;
            ac = ac + e;
noadd:      e = left(e);
            f = right(f); goto multloop;  
LF_F_4:     /------------------------- MULT ------------
            mar = sp; sp = sp + 1;
            rd;
            ac = ac * mdr; goto fetch;
LF_F_5:     /------------------------- DIV -------------
            e = ac; if (z) goto retsp;
            ac = 0;
            mar = sp; sp = sp + 1; 
            rd; 
            f = mdr; if (s) goto fn;
            0  = e; if (s) goto fpen;
fpep:       f = f - e; if (s) goto fetch;
            ac = ac + 1; goto fpep;
fpen:       f = f + e; if (s) goto fetch;
            ac = ac - 1; goto fpen;
fn:         0  = e; if (s) goto fnen;
fnep:       f = 0 - f;
            e = 0 - e; goto fpen;
fnen:       f = 0 - f;
            e = 0 - e; goto fpep;
retsp:      ac = sp; goto fetch;
LF_F_6:     /------------------------- REM -------------
            e = ac; if(z) goto retct;
            mar = sp; sp = sp + 1; 
            rd; 
            f = mdr; if (s) goto mfn;
            0  = e; if (s) goto mfpen;
mfpep:      f = f - e; if (s) goto mfpepr;
            goto mfpep;
mfpepr:     ac = f + e; goto fetch;
mfpen:      e = 0 - e; goto mfpep;
mfn:        0  = e; if (s) goto mfnen;
mfnep:      e = 0 - e;
mfnen:      f = f - e; if (s) goto mfnen;
            0  = f; if (z) goto mret0;
            ac = f + e; goto fetch;
mret0:      ac = 0; goto fetch;
retct:      ac = ct; goto fetch;
LF_F_7:     /------------------------- ADDY ------------
            mar = sp; sp = sp + 1;
            rd; goto astart;           
LF_F_8:     /------------------------- OR --------------
            mar = sp; sp = sp + 1;
            rd;
door:       f = ~mdr;
            ac = ~ac;
            ac = ac & f;
            ac = ~ac; goto fetch;
LF_F_9:     /------------------------- XOR -------------
            mar = sp; sp = sp + 1;
            rd;
            f = ~mdr;
            f = f & ac;
            e = ~ac;
            mdr = mdr & e;
            ac = f; goto door;
LF_F_A:     /------------------------- AND -------------
            mar = sp; sp = sp + 1;
            rd;
            ac = mdr & ac; goto fetch;
LF_F_B:     /------------------------- FLIP ------------
            ac = ~ac; goto fetch;
LF_F_C:     /------------------------- CALI ------------
            sp = sp - 1;
            mar = sp; mdr = pc;  
            pc = ac & xmask; wr; goto fetch; 
LF_F_D:     /------------------------- SECT ------------
            ct = ac; goto fetch;
LF_F_E:     /------------------------- DECT ------------
            ct = ct - 1; if (z) goto skip;
            goto fetch;                             
skip:       pc = pc + 1;
            goto fetch;     
LF_F_F_0000:/------------------------- SODD ------------
            0  = ac & 1; if (z) goto fetch;
            pc = pc + 1;
            goto fetch;
LF_F_F_0001:/------------------------- BPBP ------------
            mar = bp;
            rd; 
            bp = mdr; goto fetch
LF_F_F_2:   /------------------------- POBP ------------
            mar = sp; sp = sp + 1;
            rd;
            bp = mdr; goto fetch
LF_F_F_3:   /------------------------- PBP -------------
            sp = sp - 1;
            mar = sp; mdr = bp;               
            wr; goto fetch;
LF_F_F_4:   /------------------------- BCPY ------------
            mar = sp; sp = sp + 1;
            rd;
            f = mdr;
copy:       0  = ct; if (z) goto fetch;
            ct = ct - 1;
            mar = f;
            rd;
            mar = ac;
            wr; ac = ac + 1;
            f = f + 1; goto copy;
/***********************************************************
/           Available Opcodes                               
/***********************************************************
/           none
            goto fetch;