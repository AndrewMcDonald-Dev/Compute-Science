                                                 a.txt

 +-------------------------------------------------------------+
 | This software is provided to you on an "as is" basis for    |
 | instructional purposes only, without any warranties,        |
 | expressed or implied.  Neither the author nor the publisher |
 | shall be liable in any event for incidental, consequential, |
 | special, or punitive damages in connection with, or arising |
 | out of the distribution, performance, or use of this        |
 | software.                                                   |
 +-------------------------------------------------------------+

                    How to Use "a" Version 1.8 

".a" - extension for file containing assembly language code
".o" - extension for file containing object code
".e" - extension for an executable file

     The "a" program is an assembler and a linker.  If an input 
file has no extension, then ".o" is assumed (i.e., the input file 
is assumed to be an object module).  Thus, if the input file is 
not an object module, you must specify its extension.  

     If an input file is a complete assembly language program 
(i.e., it does not have to be linked with any other modules), "a"
will assemble it to an executable file with the same base name 
as the input file, but with the extension ".e".

     If an input file contains assembly code but is not a complete 
program, "a" will assemble it to an ".o" module (i.e., an object 
module). 

     "a" can process multiple modules in one invocation (it can 
both assemble and link).  For example, the command

     a m1.a m2.a m3 m4

causes "a" to assemble m1.a and m2.a, and then link the four 
object modulesl m1.o, m2.o, m3.o, and m4.o.  The name of the 
executable file will be m1.e (its base name defaults to the base 
name of the first input file).  

     If any input files with extension ".a" (i.e., a file 
containing assembly languager code) assembles to a ".e" file 
(i.e., to a complete executable program), then "a" will not 
attempt to link any of the input files. 

     When "a" links modules, it does not include the start-up 
code module unless it is specified on the command line.  The 
start-up code calls a module with an entry point named "main".  
Thus, if you are linking modules with the start-up code, then you 
must have a module with the entry point "main".  Two version of 
start-up code are available: sup.o (for the stack instruction 
set) and rup.o (for the register instruction set).



Command Line Arguments

     All command line arguments are optional, must have no 
embedded spaces, and must be separated by at least one space. 

     All command line arguments, except <infilename>, must have a
leading "/" or "-".

     All command line arguments are case insensitive, except for
filenames on systems with case-sensitive filenames.

     The format of the command line is

a  <argument> <argument> . . .

where <argument> can be

<infilename>
/a
/h or /?
/r<rspfilename>
/l<libfilename>

If one or more input file names or response files are specified on 
the command line, then "a" will not prompt the user for additional 
input. 

If "a" detects an error in an argument ON THE COMMAND LINE that 
invokes "a", it generates an error message and terminates 
execution.  If, on the other hand, "a" detects an error in an 
argument entered IN RESPONSE TO A PROMPT displayed by "a", "a" 
does not terminate.  It, instead, allows the user to re-enter. 

More than one <infilename> may be specified as long as the 
multiple modules make up one program.  

If an <infilename> has no extension, ".o" is appended to it. 

/a prevents the "a" program from performing the link step.  

/h or /? displays a help screen.

More than one /r<rspfilename> may be specified.  A response file
contains a list of files names, one name per line.  Each file
specified is included in the link process.  If /r is specified
but not followed by a file name, then the response file name
defaults to "a.rsp".

If /l<libfilename> is specified and unresolved external 
references remain after all the input files have been linked, 
then the library specified by <libfilename> is searched.  If a 
module is found in this library that can resolve one or more of 
the external references, that module is linked. "a" repeatedly 
searches and links modules from the library (or libraries, if 
more than one is specified) until either all external references 
have been resolved, or no modules can be found that resolve those 
that do exist.  In the latter case, "a" generates an error 
message and terminates.  More than one /l<libfilename> may be 
specified.  If /l<libfilename> is omitted, then the library 
defaults to a.l.  The default extension for libraries is ".l".



Search Path for Library, Response Files, and start-up code

     If a directory is specified by the /l argument, "a" searches 
for the library file in that directory.  Otherwise, "a" searches 
for the library file in the current directory and in the 
directory specified by the J1DIR environment variable, if any, in 
that order. "a" follows the same search pattern for response 
files, sup.o, and rup.o. 


Problem with a Leading "/" in Command Line Arguments on Non-
Microsoft Systems

     Command line arguments typically start with "/" on Microsoft 
systems, and with "-" on other systems.  For the sake of 
uniformity, all the programs in the J1 Software Package allow a 
command line argument to start with EITHER "/" or "-" on any of 
the supported platforms.  Unfortunately, allowing "/" to start a 
command line argument on non-Microsoft systems can cause a 
problem, because of the potential confusion with the root 
directory designator "/".  For example, is the command line 
argument

    /rf.rsp

the file rf.rsp in the root directory, or is it the argument 
marker "/r" (indicating a response file name follows) followed by 
the file name "f.rsp"?  The "a" program treats it as the latter.  

To specify the root directory at the beginning of a command line 
argument, use "//".  To specify the root directory in any other 
position within a command line argument, use "/".  For example,
"a" interprets

     //rf.rsp

as the rf.rsp file in the root directory; and it interprets

     /r/f.rsp

as the the "/r" command line argument specifying the f.rsp file 
in the root directory.

This problem does not occur on Microsoft systems because they use 
"\" rather than "/" to designate the root, and, thus, there is 
never any confusion with the argument marker "/". 

=================================================================
Assembly Language Reference


Types of Operands

     The operand field of an assembly language instruction 
can be of several types:

Note: "*" designates the current location

     Type                         Examples

    Number                          p   24   

    Label                           p   sum

    Label + Unsigned_Number         p   table + 4

    Label - Unsigned_Number         p   table - 1

    * + Unsigned_Number             p   * + 2

    * - Unsigned_Number             p   * - 2

    *                               p   *

    String terminated
    with null character             dw   "X="
                               
    String not terminated
    with null character             dw   'X='

A label can be any sequence of letters, digits, "@", "$", and "_" 
that does not start with a digit.

Strings are mapped to storage with one ASCII character per word.
Strings which are delimited with double quotes are terminated 
with the null character.  For example, the string "A" specifies
two words:

     0041    (the ASCII value of 'A')
     0000    (the null character)

In contrast, the string 'A' specifies only one word:

     0041    (the ASCII value of 'A')

The following escape sequences can be used:

     \n    newline
     \r    carriage return
     \a    bell
     \b    backspace
     \f    form feed
     \v    vertical tab
     \t    horizontal tab
     \0    null character
     \"    double quote
     \'    single quote
     \\    backslash

For example, the string consisting of three letters followed by
the newline character is:  

     'ABD\n' 

A null-terminated string of length zero or one or a non-null-
terminated string of length 1 can be used in the operand field on 
any instruction that takes an operand.  The ASCII value for the 
character in the string is placed in the operand field of the 
assembled instruction.  If a null-terminated string of length 
zero is specified, then zero is placed in the operand field.  For 
example, the instructions 

     pc 'A'
     pc "A"

are both translated to 1041 (1 is the opcode for pc; 41 is 
ASCII for 'A').  The instruction

     pc ""

is translated to 1000.  
     Strings may not span lines.  Thus, if a string requiring 
multiple lines is needed, it has to be defined with multiple 
consecutive DW directives.  The maximum length of an input line 
is 200 characters.  Thus, one line can define a string with a 
length up to 195 characters (five characters are needed for the 
DW directive, a space and two quotes). 



Instruction Sets Supported

     "a" (as well as e) has built-in support for two instruction 
sets: the stack instruction set and the register instruction set.  
The stack instruction set is the default.  To use the register 
instruction set, place a line containing 

     !register

at the beginning of the assembly language program.  Then "a", as 
well and "e", will reconfigure itself for the register instruction 
set. 



Directives

     "a" supports six directives: DW, ENTRY, EQU, EXTERN, ORG, 
and PUBLIC, .  Each directive should be on a separate line.  
Placement of directives is not critical, except for DW or ORG. 
Directives can be in either upper or lower case.


DW Directive--------------------------------------------------

     DW (define word) is used to define in memory one word (for 
numbers) or multiple words (for strings).  If a number follows 
"DW", then only one word is defined.  The range of the numbers 
can be from -32768 to 65535.  If a string follows "DW", then one 
word is defined for each character in the string, plus one word 
for the null character if double quotes are used.  For example, 

     dw    9

defines the word 0009.       

     dw "AB"

defines three words:  0041 (ASCII for 'A'),  0042  (ASCII for 
'B'), 0000 (the null character).

     dw 'AB'

defines two words:

     0041 (ASCII for 'A'), and 0042 (ASCII for 'B').


The storage defined by a DW directive can be replicated using the 
DUP modifier.  For example, 

     x:    dw   3 dup 10

is equivalent to

     x:    dw   10
           dw   10
           dw   10

DUP can be used with string constants as well as numeric 
constants.  For example, 

     y:    dw   2 dup "abc"

is equivalent to

     y:    dw   "abc"
           dw   "abc" 

The count that precedes "dup" must be unsigned and greater than 
or equal to 1. 


ENTRY Directive-----------------------------------------------

     The ENTRY directive is used to specify the entry point for 
the program.  The entry point can be specified as either an 
absolute address or a label.  For example, both
       
              entry  start

and 

              entry  29

are legal.  At most one ENTRY directive can appear in a program.  
If an ENTRY directive does not appear in a program, then the entry 
point defaults to the lowest location occupied by the program. 


EQU Directive-------------------------------------------------

     The EQU (equate) directive associates a numeric value with 
a symbol.  Wherever the symbol appears as an operand, the 
assembler substitutes its corresponding value.  For example, in 
the following program, 

          equ x    3
          p   x
          halt

the assembler substitutes 3 for x in the p instruction.  Thus, 
the p instruction is assembled as if it were written as 

          p   3

The symbol in an equ should have the same form as a label.


EXTERN directive----------------------------------------------

     EXTERN declares a label to be external--that is, used within
the module that contains the EXTERN but defined in a separately
assembled module.  For example, here is a module that can call 
the f module in a separately assembled module:

              extern f
              call   f
              halt

If the EXTERN directive did not appear in this module, then the 
assembler would flag the call instruction as using an undefined 
label. 


ORG Directive-------------------------------------------------

     The ORG directive resets the current address.  For 
example, in the program

           p    x
           halt
           org  4
     x:    dw   256
     y     dw   333

the address of x is 4.  The locations skipped because of an ORG 
directive are set to 0.  Thus, the program above is equivalent to 

          p     x
          halt
          dw    0
          dw    0
     x:   dw    256
     y:   dw    333


The ORG directive must specify an absolute address which is at 
least as big as the current address.


PUBLIC Directive----------------------------------------------

     PUBLIC makes a label global--that is, referencable by a 
separately-assembled module.  For example, in the following 
module, f can be called from a separately assembled module: 

              public f
     f:       pc  1
              dout
              ret


^-Lines-------------------------------------------------------

     A ^-line (read as "caret line") is a line whose first non-
whitespace character is "^" (without the quotes).  "a" processes 
^-lines last.  Thus, the effect of "^" on a line is to move it to 
the end of the program.  ^-lines allow constants to be defined in 
line with executable code, making reading and writing programs 
easier.  For example, consider the following code: 

          pc     prompt
^prompt:  dw     "Enter integer"
          sout
          
          ; more executable code.
          

Although the dw is physically in line with the executable code, 
"a" places it at the end of the program, out of the flow of 
control.
