/* S2j.java */
/* Generated By:JavaCC: Do not edit this line. S2j.java */
import java.io.*;
import java.util.ArrayList;
class S2j implements S2jConstants {
  private PrintWriter outFile;
  private S2jSymTab st;
  private S2jCodeGen cg;
  //-----------------------------------------
  public static void main(String[] args) throws
                                             IOException
  {
    System.out.println("S2j compiler written by ...");

    if (args.length != 1)
    {
      System.err.println("Wrong number cmd line args");
      System.exit(1);
    }

    // build input and output file names
    String inFileName = args[0] + ".s";
    String outFileName = args[0] + ".a";

    // construct file objects
    FileInputStream inFile =
                       new FileInputStream(inFileName);
    PrintWriter outFile = new PrintWriter(outFileName);

    // identify compiler/author in output file
    outFile.println("; from S2j compiler written by ...");

    // construct objects that make up compiler
    S2jSymTab st = new S2jSymTab();
    S2jCodeGen cg = new S2jCodeGen(outFile, st);
    S2j parser = new S2j(inFile);

    // initialize parser's instance variables
    parser.outFile = outFile;
    parser.st = st;
    parser.cg = cg;

    try
    {
      parser.program();
    }
    catch(ParseException e)
    {
      System.err.println(e.getMessage());
      outFile.println(e.getMessage());
      outFile.close();
      System.exit(1);
    }

    outFile.close();
  }
  //-----------------------------------------
  // If COMMON_TOKEN_ACTION is true, the token manager 
  // calls makeComment for each token to create the
  // token trace.
  //
  public void makeComment(Token t)
  {
    outFile.printf(
      "; kd=%3d bL=%3d bC=%3d eL=%3d eC=%3d im= %s%n",
       t.kind, t.beginLine, t.beginColumn, t.endLine,
       t.endColumn, t.image);
  }

// Translation grammar for S2
  final public 
void program() throws ParseException {
    statementList();
cg.endCode();
    jj_consume_token(0);
}

//------------------------------
  final public void statementList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINTLN:
    case PRINT:
    case ID:
    case SEMICOLON:
    case LEFTCURL:{
      statement();
      statementList();
      break;
      }
    default:
      jj_la1[0] = jj_gen;

    }
}

//------------------------------
  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      assignmentStatement();
      break;
      }
    case PRINTLN:{
      printlnStatement();
      break;
      }
    case PRINT:{
      printStatement();
      break;
      }
    case SEMICOLON:{
      nullStatement();
      break;
      }
    case LEFTCURL:{
      compoundStatement();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//------------------------------
  final public void assignmentStatement() throws ParseException {Token t;
    t = jj_consume_token(ID);
st.enter(t.image);
cg.emitInstruction("pc", t.image);
    jj_consume_token(ASSIGN);
    expr();
cg.emitInstruction("stav");
    jj_consume_token(SEMICOLON);
}

//------------------------------
  final public void printlnStatement() throws ParseException {
    jj_consume_token(PRINTLN);
    jj_consume_token(LEFTPAREN);
    expr();
cg.emitInstruction("dout");
cg.emitInstruction("pc", "'\\n'");
cg.emitInstruction("aout");
    jj_consume_token(RIGHTPAREN);
    jj_consume_token(SEMICOLON);
}

//------------------------------
  final public void printStatement() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(LEFTPAREN);
    expr();
cg.emitInstruction("dout");
    jj_consume_token(RIGHTPAREN);
    jj_consume_token(SEMICOLON);
}

//------------------------------
  final public void nullStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
}

//------------------------------
  final public void compoundStatement() throws ParseException {
    jj_consume_token(LEFTCURL);
    statementList();
    jj_consume_token(RIGHTCURL);
}

//------------------------------
  final public void expr() throws ParseException {
    term();
    termList();
}

//------------------------------
  final public void termList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      term();
cg.emitInstruction("add");
      termList();
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      term();
cg.emitInstruction("sub");
      termList();
      break;
      }
    default:
      jj_la1[2] = jj_gen;

    }
}

//------------------------------
  final public void term() throws ParseException {
    factor();
    factorList();
}

//------------------------------
  final public void factorList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIMES:{
      jj_consume_token(TIMES);
      factor();
cg.emitInstruction("mult");
      factorList();
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      factor();
cg.emitInstruction("div");
      factorList();
      break;
      }
    default:
      jj_la1[3] = jj_gen;

    }
}

//------------------------------
  final public void factor() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNSIGNED:{
      t = jj_consume_token(UNSIGNED);
cg.emitInstruction("pwc", t.image);
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      t = jj_consume_token(UNSIGNED);
cg.emitInstruction("pwc", t.image);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      t = jj_consume_token(UNSIGNED);
cg.emitInstruction("pwc", "-" + t.image);
      break;
      }
    case ID:{
      t = jj_consume_token(ID);
st.enter(t.image);
cg.emitInstruction("p", t.image);
      break;
      }
    case LEFTPAREN:{
      jj_consume_token(LEFTPAREN);
      expr();
      jj_consume_token(RIGHTPAREN);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public S2jTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x4ac0,0x4ac0,0x30000,0xc0000,0x31300,};
	}

  /** Constructor with InputStream. */
  public S2j(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public S2j(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new S2jTokenManager(this, jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(this,jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public S2j(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new S2jTokenManager(this, jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new S2jTokenManager(this, jj_input_stream);
	}

	 token_source.ReInit(this,jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public S2j(S2jTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(S2jTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[21];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 5; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 21; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}                                          // end of S2j
//======================================================
class S2jSymTab
{
  private ArrayList<String> symbol;
  //-----------------------------------------
  public S2jSymTab()
  {
    symbol = new ArrayList<String>();
  }
  //-----------------------------------------
  public void enter(String s)
  {
    int index = symbol.indexOf(s);

    // if s is not in symbol, then add it
    if (index < 0)
      symbol.add(s);
  }
  //-----------------------------------------
  public String getSymbol(int i)
  {
    return symbol.get(i);
  }
  //-----------------------------------------
  public int getSize()
  {
    return symbol.size();
  }
}                                    // end of S2jSymTab
//======================================================
class S2jCodeGen
{
  private PrintWriter outFile;
  private S2jSymTab st;
  //-----------------------------------------
  public S2jCodeGen(PrintWriter outFile, S2jSymTab st)
  {
    this.outFile = outFile;
    this.st = st;
  }
  //-----------------------------------------
  public void emitInstruction(String op)
  {
    outFile.printf("          %-4s%n", op);
  }
  //-----------------------------------------
  public void emitInstruction(String op, String opnd)
  {
    outFile.printf(
                  "          %-4s      %s%n", op, opnd);
  }
  //-----------------------------------------
  public void emitdw(String label, String value)
  {
    outFile.printf(
             "%-9s dw        %s%n", label + ":", value);
  }
  //-----------------------------------------
  public void endCode()
  {
    outFile.println();
    emitInstruction("halt");

    int size = st.getSize();
    // emit dw for each symbol in the symbol table
    for (int i=0; i < size; i++)
      emitdw(st.getSymbol(i), "0");
  }
}                             // end of S2jCodeGen class

