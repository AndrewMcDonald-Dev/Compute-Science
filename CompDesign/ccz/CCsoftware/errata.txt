Errata: COMPILER CONSTRUCTION USING JAVA, JAVACC, AND YACC    4/16/2014

Page 43, middle paragraph
     Change "assignstatement" to "assignStatement"

Page 72, Exercise 3.9
     In the question, add the production S -> b.  In the first 
     answer, add B -> b

Page 219, Item 5, fifth line from the bottom of item 5
     Change "does use any" to "does not use any" 

Page 221, Item 13
     In case 'c', change "bye" to "goodbye"

Page 223, C() method
     Change "println" to "print"

Page 233, Figure 10.5
     On line 1, "private" should precede "void"
     on line 17, "private" should precede "char"

Page 234, Figure 10.6
     On line 1, "private" should precede "void"
     On line 18, "private" should precede "int"

Page 239, Page heading
     Should read "A NEW TOKEN MANAGER"

Page 295, Action at top and bottom of page
     Change "cg.emit" to "cg.emitInstruction"

Page 296, Action at top of page
     Change "cg.emit" to cg.emitInstruction"

Page 318, Section 12.11.1
     Change two occurrences of "READINT" to "PRINT"
     Change two occurrences of "readint" to "print"

Page 337, factor method at top of page, t=<ID> alternative
     Change "symTab" to "st"

Page 348, Section 13.5, second paragraph, tenth line
     Change "see line 262 in Figure 12.4" to "see line 262 in 
     Figure 12.3" 

Page 398
     Add the following problems:  
     
     15. The code generator rather than the parser can perform 
         unary minus optimization.  Add parser-performed unary 
         minus optimization to S3 (see Problem 2); in a separate 
         S3, add code-generator-performed unary minus 
         optimization (Hint: see the discussion of peephole 
         optimization on page 540). Compare the assembler code 
         generated by the two versions of S3.  

     16. Replace the three-instruction sequence on lines 19, 20, 
         and 21 in Figure 14.2 with a more efficient two-instruction 
         sequence. Hint: the first instruction is stav.  
                  
Page 504, Figure 18.3, line 36
     Change "in Fig. 18.3" to "G18.1 on page 503"

Page 514
     Add the following problem:

     11. Change the line in the main method that constructs
         the token manager (see line 9 in Fig. 18.12) to

             G3TokenMgr tm = new G3TokenMgr(".*" + args[0]);

         This line prefixes the regular expression in args[0] 
         with ".*".  The orginal regular expression (arg[0]) can 
         match some subtring of a line if and only if the 
         modified regular expression (".*" + arg[0]) can match 
         the line starting with the first character.  Thus, with 
         the modified regular expression, the match method in G3 
         needs to check for a match starting ONLY from the first 
         character on each line--not from the first character, 
         then from the second character, then from the third 
         character, and so on (which is the effect of the for 
         loop in match).  The for loop, but not its body, can be 
         eliminated.  Note that the break statement within the 
         for loop should also be eliminated since there will no 
         longer be a for loop to break out of.  Implement match 
         using this approach.  Run tests on some large files to 
         see if this approach is more efficient than the approach 
         given in Fig. 18.11 that uses a for loop.  Is there a 
         modification to lambdaClosure() that has the same effect 
         as prefixing the regular expression with ".*" but 
         involves less overhead?  If so, implement it and 
         determine its efficiency relative to the two other 
         approaches.  Thanks to Jan Vesely, Faculty of 
         Mathematics and Physics, Charles University in Prague 
         for this problem. 

Page 520, Fig. 19.3
     Change "codeGen" to "cg"                                 

Page 526
     Change "void" to "int" in the method headers for the add and 
     mult methods.

Page 539, last line
     Insert "println," (without the quotes) after "assign,"

Page 546
     Add the following problem:

     22. In Figure 20.8, would it be better to test if 
         ac != expVal in the emitLoad method?

Page 570, fourth, fifth lines from top
     Change the dot (an elevated period) to the Greek letter beta 
     (beta looks like an italic letter B in which the left 
     vertical stroke extends below the body of the letter)

Page 570, production on seventh line from top
     Delete alpha, change dot to beta

Page 604, expr production near the bottom of the page
     Insert "-" (without the quotes) before "$2.ival" 
     in the last action
